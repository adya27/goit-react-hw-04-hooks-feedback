{"version":3,"sources":["Components/Statistics/Statistics.module.css","Components/FeedbackOptions/FeedbackButton.module.css","logo.svg","Components/Statistics/Statistics.jsx","Components/FeedbackOptions/FeedbackButton.jsx","Components/FeedbackOptions/FeedbackOptions.jsx","Components/Section/Section.jsx","Components/Statistics/Notification.jsx","Components/Feedback.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Statistics","prop","className","styles","Statistic","good","neutral","bad","total","positiveFeedback","FeedbackButton","type","onClick","handle","btnName","FeedbackOption","handleGood","handleNeutral","handleBad","Section","props","title","children","Notification","message","Feedback","useState","setGood","setNeutral","setBad","countTotalFeedback","Number","countPositiveFeedbackPercentage","toFixed","FeedbackOptions","evt","pr","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,UAAY,gC,mBCA9BD,EAAOC,QAAU,CAAC,eAAiB,yC,iICDpB,I,4BC6BAC,MAxBf,SAAoBC,GAClB,OACE,gCACE,4CACA,uBAAMC,UAAWC,IAAOC,UAAxB,mBAA0CH,EAAKI,QAC/C,uBAAMH,UAAWC,IAAOC,UAAxB,sBAA6CH,EAAKK,WAClD,uBAAMJ,UAAWC,IAAOC,UAAxB,kBAAyCH,EAAKM,OAC9C,2CAAcN,EAAKO,SACnB,oDAEGP,EAAKQ,iBAFR,W,gBCOSC,MAjBf,SAAwBT,GACtB,OACE,wBACEC,UAAWC,IAAOO,eAClBC,KAAK,SACLC,QAASX,EAAKY,OAHhB,SAKGZ,EAAKa,WCGGC,MAVf,YAAmE,IAAzCC,EAAwC,EAAxCA,WAAYC,EAA4B,EAA5BA,cAAeC,EAAa,EAAbA,UACnD,OACE,oCACE,cAAC,EAAD,CAAgBJ,QAAQ,OAAOD,OAAQG,IACvC,cAAC,EAAD,CAAgBF,QAAQ,UAAUD,OAAQI,IAC1C,cAAC,EAAD,CAAgBH,QAAQ,MAAMD,OAAQK,QCS7BC,MAdf,SAAiBC,GACf,OACE,oCACE,6BAAKA,EAAMC,QACVD,EAAME,aCOEC,MAZf,SAAsBH,GACpB,OACE,8BACE,6BAAKA,EAAMI,aCkDFC,MAhDf,WAAqB,IAAD,EACMC,mBAAS,GADf,mBACXrB,EADW,KACLsB,EADK,OAEYD,mBAAS,GAFrB,mBAEXpB,EAFW,KAEFsB,EAFE,OAGIF,mBAAS,GAHb,mBAGXnB,EAHW,KAGNsB,EAHM,KAiBZC,EAAqBC,OAAO1B,EAAOC,EAAUC,GAI7CyB,EACFD,OAHuB,IAAP1B,EAAcyB,EAAsB,IAAM,EAG3C,IAAPzB,EAAcyB,GACN,IAAPzB,EAAcyB,GAAoBG,QAAQ,IAEvD,OACE,eAAC,EAAD,CAASZ,MAAM,wBAAf,UACE,cAACa,EAAD,CACElB,WAvBa,SAACmB,GAClBR,GAAQ,SAACS,GAAD,OAAQA,EAAK,MAuBjBnB,cApBgB,SAACkB,GACrBP,GAAW,SAACQ,GAAD,OAAQA,EAAK,MAoBpBlB,UAjBY,SAACiB,GACjBN,GAAO,SAACO,GAAD,OAAQA,EAAK,QAmBjBN,EAAqB,EACpB,cAAC,EAAD,CACEzB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOsB,EACPrB,iBAAkBuB,IAGpB,cAAC,EAAD,CAAcR,QAAQ,0BCpCfa,MARf,WACE,OACE,qBAAKnC,UAAU,MAAf,SACE,cAAC,EAAD,OCISoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c48a44b4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Statistic\":\"Statistics_Statistic__riQK-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FeedbackButton\":\"FeedbackButton_FeedbackButton__1mP0p\"};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport styles from \"./Statistics.module.css\";\n\nfunction Statistics(prop) {\n  return (\n    <div>\n      <h2>Statistics</h2>\n      <span className={styles.Statistic}>Good: {prop.good}</span>\n      <span className={styles.Statistic}>Neutral: {prop.neutral}</span>\n      <span className={styles.Statistic}>Bad: {prop.bad}</span>\n      <span>Total: {prop.total}</span>\n      <h2>\n        Positive feedback:\n        {prop.positiveFeedback}%\n      </h2>\n    </div>\n  );\n}\n\nStatistics.propTypes = {\n  bad: PropTypes.number.isRequired,\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  positiveFeedback: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import styles from \"./FeedbackButton.module.css\";\nimport PropTypes from \"prop-types\";\n\nfunction FeedbackButton(prop) {\n  return (\n    <button\n      className={styles.FeedbackButton}\n      type=\"button\"\n      onClick={prop.handle}\n    >\n      {prop.btnName}\n    </button>\n  );\n}\n\nFeedbackButton.propTypes = {\n  btnName: PropTypes.string.isRequired,\n  handle: PropTypes.func.isRequired,\n};\n\nexport default FeedbackButton;\n","import FeedbackButton from \"./FeedbackButton\";\nimport PropTypes from \"prop-types\";\n\nfunction FeedbackOption({ handleGood, handleNeutral, handleBad }) {\n  return (\n    <section>\n      <FeedbackButton btnName=\"Good\" handle={handleGood} />\n      <FeedbackButton btnName=\"Neutral\" handle={handleNeutral} />\n      <FeedbackButton btnName=\"Bad\" handle={handleBad} />\n    </section>\n  );\n}\n\nexport default FeedbackOption;\n\nFeedbackOption.propTypes = {\n  handleBad: PropTypes.func.isRequired,\n  handleGood: PropTypes.func.isRequired,\n  handleNeutral: PropTypes.func.isRequired,\n};\n","// import styles from \"./Section.module.css\";\nimport PropTypes from \"prop-types\";\n\nfunction Section(props) {\n  return (\n    <section>\n      <h2>{props.title}</h2>\n      {props.children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  children: PropTypes.any.isRequired,\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import PropTypes from \"prop-types\";\n\nfunction Notification(props) {\n  return (\n    <div>\n      <h2>{props.message}</h2>\n    </div>\n  );\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { useState } from \"react\";\r\n\r\nimport Statistics from \"./Statistics/Statistics\";\r\nimport FeedbackOptions from \"./FeedbackOptions/FeedbackOptions\";\r\nimport Section from \"./Section/Section\";\r\nimport Notification from \"./Statistics/Notification\";\r\n\r\nfunction Feedback() {\r\n  const [good, setGood] = useState(0);\r\n  const [neutral, setNeutral] = useState(0);\r\n  const [bad, setBad] = useState(0);\r\n\r\n  const handleGood = (evt) => {\r\n    setGood((pr) => pr + 1);\r\n  };\r\n\r\n  const handleNeutral = (evt) => {\r\n    setNeutral((pr) => pr + 1);\r\n  };\r\n\r\n  const handleBad = (evt) => {\r\n    setBad((pr) => pr + 1);\r\n  };\r\n\r\n  const countTotalFeedback = Number(good + neutral + bad);\r\n\r\n  const ifInteger = ((good * 100) / countTotalFeedback) % 1 === 0;\r\n\r\n  const countPositiveFeedbackPercentage = ifInteger\r\n    ? Number((good * 100) / countTotalFeedback)\r\n    : Number(((good * 100) / countTotalFeedback).toFixed(2));\r\n\r\n  return (\r\n    <Section title=\"Please leave feedback\">\r\n      <FeedbackOptions\r\n        handleGood={handleGood}\r\n        handleNeutral={handleNeutral}\r\n        handleBad={handleBad}\r\n      />\r\n\r\n      {countTotalFeedback > 0 ? (\r\n        <Statistics\r\n          good={good}\r\n          neutral={neutral}\r\n          bad={bad}\r\n          total={countTotalFeedback}\r\n          positiveFeedback={countPositiveFeedbackPercentage}\r\n        />\r\n      ) : (\r\n        <Notification message=\"No feedback given\" />\r\n      )}\r\n    </Section>\r\n  );\r\n}\r\n\r\nexport default Feedback;\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Feedback from \"./Components/Feedback\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Feedback />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}